#!/usr/bin/env python
# MIT License
#
# Copyright (c) 2019 Sean-Jiun Wang
#
# Permission is hereby granted, free of charge, to any person obtaining a copy
# of this software and associated documentation files (the "Software"), to deal
# in the Software without restriction, including without limitation the rights
# to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
# copies of the Software, and to permit persons to whom the Software is
# furnished to do so, subject to the following conditions:
#
# The above copyright notice and this permission notice shall be included in all
# copies or substantial portions of the Software.
#
# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
# OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
# SOFTWARE.

import asyncio
import collections
import email.parser
import email.policy
import imaplib
import logging
import quopri
import ssl

from bs4 import BeautifulSoup
import click
import discord


logger = logging.getLogger('ZillowBot')

email_parser = email.parser.BytesParser(policy=email.policy.default)

ZillowListing = collections.namedtuple('ZillowListing', ['url', 'image_url', 'price', 'facts', 'address'])


def parse_instant_update(message_data):
    """Parse a Zillow Instant Update email for listing information.

    Parameters
    ----------
    message_data : list
        The entire instant update email data in RFC822 format.

        This is expected to be the return value of a call to IMAP4.fetch
        which returns the lightly parsed message data as a list. The list
        contains two items:
        * The first item is a 2-tuple whose elements are the flags used by
          the FETCH command and the response containing the message, both
          of which are byte literals, respectively.
        * The second item is a byte literal containing a single closing
          parenthesis ")" appended to the end of the response.

    Returns
    -------
    listing : ZillowListing
        A namedtuple whose fields contain the listing's information.
    """
    message = email_parser.parsebytes(message_data[0][1])

    # Find the HTML part of the email message.
    for part in message.iter_parts():
        if part.get_content_type() == 'text/html':
            body = part.get_body()
            break

    # Decode the HTML content body from its Quoted-Printable (QP) encoding.
    body_decoded = quopri.decodestring(body.as_string())

    # Parse the HTML document tree.
    html_doc = BeautifulSoup(markup=body_decoded, features='lxml')
    logger.debug('Dumping parsed HTML document tree...')
    logger.debug(html_doc.prettify())

    # Search the HTML document tree for listing information.
    # Sometimes the instant update email contains additional suggested
    # listings apart from the main listing which are not of interest,
    # which is why the search is limited to the first five tags with
    # aria-label attributes.
    listing_info = {}
    for tag in html_doc.find_all(attrs={'aria-label': True}, limit=5):
        aria_label = tag.get('aria-label')
        if aria_label.startswith('Property photo'):
            listing_info['url'] = tag.a.get('href')
            listing_info['image_url'] = tag.get('background')
        elif aria_label.startswith('Property price'):
            listing_info['price'] = tag.text.strip()
        elif aria_label.startswith('Property facts'):
            listing_info['facts'] = tag.text.strip()
        elif aria_label.startswith('Property address'):
            listing_info['address'] = tag.text.strip().replace(u'\u200c', '')

    listing = ZillowListing(**listing_info)

    return listing


def imap_connection(host, port, username, password):
    """Open a connection to an IMAP server."""
    ssl_context = ssl.create_default_context()
    logger.debug(f'Connecting to {host} on port {port}')
    conn = imaplib.IMAP4_SSL(host, port, ssl_context=ssl_context)
    logger.debug(f'Logging in as {username}')
    conn.login(username, password)
    return conn


async def fetch_instant_updates(conn, mailbox, wait):
    """Fetch Zillow Instant Update emails.

    This is implemented as an asynchronous generator.

    Parameters
    ----------
    conn : imaplib.IMAP4_SSL
        An open connection to the IMAP server.
    mailbox : string
        The name of the mailbox in which to search for Zillow Instant Update emails.
    wait : numeric
        The number of seconds to wait between consecutive fetches.
    """
    logger.debug(f'Fetches set to occur every {wait} seconds')

    while True:
        with conn:
            # Select the mailbox that receives instant update emails.
            response, _ = conn.select(mailbox)
            logger.debug(f'Selecting mailbox {mailbox}: {response}')

            # Search for all unseen instant update emails.
            response, data = conn.search(None, '(FROM "instant-updates@mail.zillow.com" SUBJECT "New Listing" UNSEEN)')
            msgnums = data[0].split()
            logger.info(f'Searching for emails: {response}, found {len(msgnums)} messages')

            # For each instant update email found, fetch it, parse it, and then mark it as seen.
            for msgnum in msgnums:
                response, message_data = conn.fetch(msgnum, '(RFC822)')
                logger.debug(f'Fetching message #{int(msgnum)}: {response}')
                listing = parse_instant_update(message_data)
                conn.store(msgnum, '+FLAGS', '\\Seen')
                yield listing

        await asyncio.sleep(wait)


class ZillowBot(discord.Client):
    """A Discord bot that monitors an email mailbox for Zillow Instant Update emails."""
    def __init__(self, channel, conn, mailbox, wait):
        super().__init__()
        self.background_task = self.loop.create_task(self.post_new_listings(channel, conn, mailbox, wait))

    async def on_ready(self):
        logger.info(f'Logged in as {self.user.name} with ID {self.user.id}')

    async def post_new_listings(self, channel, conn, mailbox, wait):
        await self.wait_until_ready()
        channel = self.get_channel(channel)
        while not self.is_closed():
            async for listing in fetch_instant_updates(conn, mailbox, wait):
                logger.debug(f'Parsed new listing: {listing}')
                embed = discord.Embed(
                    title=f'A new listing at {listing.address} has appeared!',
                    description=f'Features: {listing.facts} Price: {listing.price}',
                    url=listing.url,
                )
                embed.set_image(url=listing.image_url)
                await channel.send(embed=embed)


@click.command(context_settings={'help_option_names': ['-h', '--help']})
@click.option('--email', prompt='Email Address', hidden=True)
@click.password_option()
@click.option('--token', prompt='Discord Token', hide_input=True, hidden=True)
@click.option('--channel', prompt='Discord Channel ID', hide_input=True, hidden=True)
@click.option('--host', default='imap.gmail.com', show_default=True, help="The host name of your email service's IMAP server.")
@click.option('--port', default=993, show_default=True, help="The port used by your email service's IMAP server.")
@click.option('--mailbox', default='INBOX', show_default=True, help='The name of the mailbox in which to search for Zillow Instant Update emails.')
@click.option('--wait', default=300, show_default=True, help='The number of seconds that the bot waits before checking for new emails.')
@click.option('--debug', is_flag=True, help='Enable debugging messages.')
def cli(email, password, token, channel, host, port, mailbox, wait, debug):
    """Run a Discord bot that monitors your email for Zillow Instant
    Updates and sends you new listing information.

    You will be prompted for your email address and password, the token
    used to authenticate the bot, and the ID of the text channel where
    the bot will post messages.
    """
    level = logging.DEBUG if debug else logging.INFO
    logging.basicConfig(format='%(asctime)s %(levelname)s [%(name)s] %(message)s', level=level)

    # Try to establish a connection with the IMAP server.
    try:
        conn = imap_connection(host, port, email, password)
    except ConnectionRefusedError:
        click.echo('The connection was refused by the server. Was your login information correct?')
    except Exception:
        raise

    # Initialize and run the bot.
    bot = ZillowBot(channel, conn, mailbox, wait)
    bot.run()


if __name__ == '__main__':

    cli()

